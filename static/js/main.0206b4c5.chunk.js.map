{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","items","isLoaded","items2","isLoaded2","combArray","cors","fetch","then","res","json","setState","response","games","id","hash","this","console","log","newCombArray","forEach","item","item2","appid","playtime_forever","push","sort","a","b","maxHours","class","map","src","createSteamImage","img_logo_url","alt","name","Math","round","style","width","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2LA6FeA,G,wDAxFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,GACPC,UAAU,EACVC,OAAQ,GACRC,WAAW,EACXC,UAAW,IAPI,E,gEAWE,IAAD,OAGZC,EAAO,uCAEbC,MAAMD,EAJM,gKAKXE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACE,GACL,EAAKC,SAAS,CACZT,UAAU,EACVD,MAAOS,EAAKE,SAASC,WAGzBN,MAAMD,EAXO,gKAYZE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACE,GACL,EAAKC,SAAS,CACZP,WAAW,EACXD,OAAQO,EAAKE,SAASC,a,uCAKXC,EAAIC,GACnB,MAAO,mEAAqED,EAAK,IAAMC,EAAM,S,+BAGrF,IAAD,SACwCC,KAAKhB,MAA5CE,EADD,EACCA,SAAUE,EADX,EACWA,UAAWH,EADtB,EACsBA,MAAOE,EAD7B,EAC6BA,OACpC,GAAKD,GAAaE,EAGb,CACHa,QAAQC,IAAIjB,GACZgB,QAAQC,IAAIf,GACZ,IAAIgB,EAAe,GACnBlB,EAAMmB,SAAQ,SAACC,GACblB,EAAOiB,SAAQ,SAACE,GACVA,EAAMC,QAAUF,EAAKE,QACvBF,EAAKG,kBAAoBH,EAAKG,iBAAmBF,EAAME,kBAAkB,EACzEL,EAAaM,KAAKJ,UAIxBF,EAAaO,MAAK,SAASC,EAAEC,GAC3B,OAAOA,EAAEJ,iBAAmBG,EAAEH,oBAEhC,IAAIK,EAAWV,EAAa,GAE5B,OADAF,QAAQC,IAAIC,GAEV,sBAAKW,MAAM,YAAX,UACE,sBAAKA,MAAM,kBAAX,UACE,oDACA,wDAEF,qBAAKA,MAAM,aAAX,SACKX,EAAaY,KAAI,SAAAV,GAAI,OACpB,sBAAKS,MAAM,UAAX,UACE,qBAAKE,IAAK,EAAKC,iBAAiBZ,EAAKE,MAAMF,EAAKa,cAAeJ,MAAM,0BAA0BK,IAAI,SACnG,qBAAKL,MAAM,MAAX,SACE,6BAAKT,EAAKe,SAEZ,sBAAKN,MAAM,QAAX,UACE,uBAAMA,MAAM,mBAAZ,UAAgCO,KAAKC,MAAMjB,EAAKG,iBAAiB,IAAjE,UACA,qBAAKM,MAAM,WAAX,SACE,qBAAKA,MAAM,eAAeS,MAAO,CAACC,MAAQnB,EAAKG,iBAAiBK,EAASL,iBAAkB,cARvEH,EAAKE,eA3BzC,OAAO,iD,GA3CKkB,cCSHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0206b4c5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      isLoaded: false,\n      items2: [],\n      isLoaded2: false,\n      combArray: []\n    }\n  }\n\n  componentDidMount() {\n    const api = \"http://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/?key=391C66AEE33C44E3C36C283651E05BEA&steamid=76561198040298609&include_appinfo=1&format=json\"\n    const api2 = \"http://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/?key=391C66AEE33C44E3C36C283651E05BEA&steamid=76561198165907050&include_appinfo=1&format=json\"\n    const cors = \"https://cors-anywhere.herokuapp.com/\"\n    \n    fetch(cors + api)\n    .then(res => res.json())\n    .then((json) => {\n      this.setState({\n        isLoaded: true,\n        items: json.response.games\n      })\n    })\n    fetch(cors + api2)\n    .then(res => res.json())\n    .then((json) => {\n      this.setState({\n        isLoaded2: true,\n        items2: json.response.games\n      })\n    })\n  }\n\n  createSteamImage(id, hash) {\n    return \"http://media.steampowered.com/steamcommunity/public/images/apps/\" + id + \"/\" + hash +\".jpg\"\n  }\n\n  render() {\n    const { isLoaded, isLoaded2, items, items2 } = this.state;\n    if (!isLoaded && !isLoaded2) {\n      return <div>Loading...</div>\n    }\n    else {\n      console.log(items)\n      console.log(items2)\n      let newCombArray = []\n      items.forEach((item) => {\n        items2.forEach((item2) => {\n          if (item2.appid === item.appid) {\n            item.playtime_forever = (item.playtime_forever + item2.playtime_forever)/2\n            newCombArray.push(item)\n          }\n        })\n      })\n      newCombArray.sort(function(a,b) {\n        return b.playtime_forever - a.playtime_forever;\n      })\n      let maxHours = newCombArray[0]\n      console.log(newCombArray)\n      return (\n        <div class=\"container\">\n          <div class=\"col text-center\">\n            <h1>Shared steam games</h1>\n            <h4>By average playtime</h4>\n          </div>\n          <div class=\"col m-auto\">\n              {newCombArray.map(item => (\n                <div class=\"row m-2\" key={item.appid}>\n                  <img src={this.createSteamImage(item.appid,item.img_logo_url)} class=\"img rounded h-50 center\" alt=\"Logo\"></img>\n                  <div class=\"col\">\n                    <h2>{item.name}</h2>\n                  </div>\n                  <div class=\"col-2\">\n                    <span class=\"badge badge-info\">{Math.round(item.playtime_forever/60)} hrs</span>\n                    <div class=\"progress\">\n                      <div class=\"progress-bar\" style={{width:((item.playtime_forever/maxHours.playtime_forever)*100)}}></div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n          </div>\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
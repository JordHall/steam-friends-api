{"version":3,"sources":["SharedSteamGames.js","App.js","reportWebVitals.js","index.js"],"names":["SharedSteamGames","props","state","items","isLoaded","items2","isLoaded2","combArray","api1","api2","api1Url","this","api2Url","cors","fetch","then","res","json","setState","response","games","catch","error","console","log","id","hash","min","max","toString","newCombArray","forEach","item","item2","appid","avg","Math","round","playtime_forever","playtime1","playtime2","push","sort","a","b","maxHours","class","map","src","createSteamImage","img_logo_url","alt","name","style","width","getProgWidth","Component","App","userInput","user1","user2","buttonClickHandle","bind","handleChange","render","event","target","value","required","type","onChange","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c878839.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\n\r\nclass SharedSteamGames extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      isLoaded: false,\r\n      items2: [],\r\n      isLoaded2: false,\r\n      combArray: [],\r\n      api1: \"\",\r\n      api2: \"\"\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const api1Url = \"http://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/?key=391C66AEE33C44E3C36C283651E05BEA&steamid=\" + this.props.api1 + \"&include_appinfo=1&format=json\"\r\n    const api2Url = \"http://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/?key=391C66AEE33C44E3C36C283651E05BEA&steamid=\" + this.props.api2 + \"&include_appinfo=1&format=json\"\r\n    const cors = \"https://cors-anywhere.herokuapp.com/\"\r\n\r\n    fetch(cors + api1Url)\r\n      .then(res => res.json())\r\n      .then((json) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          items: json.response.games\r\n        });\r\n      }).catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    fetch(cors + api2Url)\r\n      .then(res => res.json())\r\n      .then((json) => {\r\n        this.setState({\r\n          isLoaded2: true,\r\n          items2: json.response.games\r\n        });\r\n      }).catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  createSteamImage(id, hash) {\r\n    return \"https://media.steampowered.com/steamcommunity/public/images/apps/\" + id + \"/\" + hash + \".jpg\"\r\n  }\r\n\r\n  getProgWidth(min, max) {\r\n    return ((min / max) * 100).toString() + \"%\"\r\n  }\r\n\r\n  render() {\r\n    const { isLoaded, isLoaded2, items, items2 } = this.state;\r\n    if (!isLoaded && !isLoaded2) {\r\n      return <div class=\"text-center\">Loading...</div>\r\n    }\r\n    else {\r\n      console.log(items)\r\n      console.log(items2)\r\n      let newCombArray = []\r\n      items.forEach((item) => {\r\n        items2.forEach((item2) => {\r\n          if (item2.appid === item.appid) {\r\n            item.avg = Math.round(((item.playtime_forever + item2.playtime_forever) / 2) / 60)\r\n            item.playtime1 = Math.round(item.playtime_forever/ 60)\r\n            item.playtime2 = Math.round(item2.playtime_forever / 60)\r\n            newCombArray.push(item)\r\n          }\r\n        })\r\n      })\r\n      newCombArray.sort(function (a, b) {\r\n        return b.avg - a.avg;\r\n      })\r\n      console.log(newCombArray)\r\n      let maxHours = newCombArray[0]\r\n      return (\r\n        <div class=\"container\">\r\n          <div class=\"col m-auto\">\r\n            {newCombArray.map(item => (\r\n              <div class=\"row m-2\" key={item.appid}>\r\n                <img src={this.createSteamImage(item.appid, item.img_logo_url)} class=\"img rounded h-50 center\" alt=\"Logo\"></img>\r\n                <div class=\"col\">\r\n                  <h2>{item.name}</h2>\r\n                </div>\r\n                <div class=\"col-2\">\r\n                  <span class=\"badge badge-primary\">{item.playtime1} hrs</span>\r\n                  <span class=\"badge badge-danger\"> {item.playtime2} hrs</span>\r\n                  <div class=\"progress position-relative\">\r\n                    <div class=\"progress-bar bg-info\" style={{ width: this.getProgWidth(item.playtime1,maxHours.avg) }}></div>\r\n                    <span class=\"justify-content-center d-flex position-absolute w-100 mt-2 font-weight-bold text-secondary\">{item.avg}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default SharedSteamGames;","import React, { Component } from \"react\";\r\nimport SharedSteamGames from \"./SharedSteamGames\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userInput: false,\r\n            user1: \"\",\r\n            user2: \"\"\r\n        }\r\n        this.buttonClickHandle = this.buttonClickHandle.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    buttonClickHandle() {\r\n        this.setState({\r\n            userInput: true\r\n        })\r\n        this.render()\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { userInput, user1, user2 } = this.state;\r\n        if (userInput === false) {\r\n            return (\r\n                <div class=\"container text-center p-2 mt-5 font-weight-bold\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col p-1\">\r\n                            <label class=\"p-3\">User 1</label>\r\n                            <input required type=\"text\" name=\"user1\" value={user1} onChange={this.handleChange}></input>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col p-1\">\r\n                            <label class=\"p-3\">User 2</label>\r\n                            <input required type=\"text\" name=\"user2\" value={user2} onChange={this.handleChange}></input>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col p-3\">\r\n                            <button class=\"btn btn-primary\" onClick={this.buttonClickHandle}>Find</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        if (userInput === true) {\r\n            return (\r\n                <SharedSteamGames api1={user1} api2={user2} />\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}